#####################################################################
# 	Macros
#####################################################################
   
[gcode_macro _CG28]
description: Conditional G28 homing, home if not already
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}  

[gcode_macro PURGE_LINE]
description: Print a purge line at front left
gcode:
    {% if "z" not in printer.toolhead.homed_axes %}
        G28                             ;Only G28 Home if needed
    {% endif %}
    G0 X10 Y3 Z0.2 F9000         ; Move to start position
    G92 E0                        ; Reset Extruder
    G1 E10 F600                   ; Extrude a little
    G1 X100 E20 F1000              ; Draw line
    G92 E0                        ; Reset Extruder
    G91                           ; relative positioning
    G0 Z10 F1000                  ; Raise nozzle
    G90
    
[gcode_macro _HEATSOAK_CHAMBER]
description: Heatsoak chamber to a specified temperature
variable_tempsensor_name: 'temperature_sensor chamber'
gcode:
    {% set chamber = params.CHAMBER|default(0)|int %}

    {% if chamber %}
        {% if printer[tempsensor_name].temperature|float < chamber %}
            {action_respond_info('Heat soaking chamber to %dC, from: %dC' % (chamber, printer[tempsensor_name].temperature|float))}
            G0 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_maximum.y / 2} Z15 F7200  # go to the middle of the bed
            M106 S255               # part cooling fan at full blast
            #_BED_FANS_ON SPEED=0.5  # bed fans at 50%
            TEMPERATURE_WAIT SENSOR="{tempsensor_name}" MINIMUM={chamber}  # wait for chamber temp while the bed does the heating
            M107                    # part cooling fan off
      {% endif %}

      #_BED_FANS_ON SPEED=0.3  # bed fans at 30% to maintain chamber temp
  {% endif %}
   
[gcode_macro PRINT_START]
description: Start of print sequence
gcode:
    {% set chamber_temp = params.CHAMBER|default(0)|int %}
    {% set bed_temp = params.BED|int %}
    {% set extruder_temp = params.EXTRUDER|int %}
	_CASELIGHT_ON
    G90                                              # absolute coordinate mode
	G92 E0
    M107                                             # part cooling fan off
    M220 S100                                        # speed factor
    M221 S100                                        # extrusion factor
    CLEAR_PAUSE                                      # clear any lingering print pause
    
    BED_MESH_CLEAR                                   # clear bed mesh
    M140 S{bed_temp}                                 # start heating bed
	STATUS_HOMING
    M117 Homing
    G28                                              # home XYZ
	M117 Heat Soak...
	STATUS_HEATING
    _HEATSOAK_CHAMBER CHAMBER={chamber_temp}         # heatsoak based on chamber temp in filament settings, if set to 0 will be skipped
    M104 S{extruder_temp-30}                         # start heating hotend -30C of print temp to prevent oozing
	STATUS_CLEANING
	CLEAN_NOZZLE									 # clean the nozzle
    M117 QGL...
	STATUS_LEVELING
	ATTACH_PROBE_LOCK								 # attach probe and lock
    QUAD_GANTRY_LEVEL                                # level gantry
    M83                                              # make the E relative independant of other axis
    G0 E-3 F300                                      # retract to prevent oozing
	STATUS_HOMING
    G28 Z                                            # rehome z axis        
    M190 S{bed_temp}                                 # set bed to final temp, and wait
	STATUS_MESHING
    M117 Bed Mesh...
    BED_MESH_CALIBRATE                               # create bed mesh
	DOCK_PROBE_UNLOCK								 # dock probe and unlock
	STATUS_CLEANING
	CLEAN_NOZZLE									 # clean the nozzle
	STATUS_CALIBRATING_Z
	M117 Z Calibration...
    CALIBRATE_Z                                      # calibrate Z offset
	STATUS_HEATING
	G0 X10 Y3 F9000									 # move to purge line start position
	M117 Waiting for temp...
    M109 S{extruder_temp}                            # set extruder to final temp, and wait
	STATUS_PRINTING
    M117 Purging
    PURGE_LINE                                       # extrude purge line before printing
    M117 Starting Print
   

[gcode_macro PRINT_END]
description: End of print sequence
gcode:
	STATUS_BUSY
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X175 Y350 F3600            ; park nozzle at rear
    BED_MESH_CLEAR
	STATUS_READY
	# Filter the air at full power for 10min before stopping everything
    SET_FAN_SPEED FAN=Filter SPEED=1
    G4 P{60000 * 10}
    SET_FAN_SPEED FAN=Filter SPEED=0
	
	
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
description: Speed test to check for skipped steps
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED
	
	
[gcode_macro RESONANCES_TEST]
description: Run input shaper test
gcode:
  #{% set user = printer['gcode_macro _USER_VARIABLE'] %}
  _CG28                                                 ; home if needed
  TURN_OFF_HEATERS                                      ; turn off heaters
  M107                                                  ; turn off fan
  #{% if user.hw.chamber.fan %} M141 {% endif %}         ; exhaust fan off
  #{% if user.hw.filter.ena %} _SET_FILTER {% endif %}   ; filter off
  _PRINT_AR T="INPUT SHAPER: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="INPUT SHAPER: Resonance Tests starting ..."
  TEST_RESONANCES AXIS=X                                ; measure X 
  TEST_RESONANCES AXIS=Y                                ; measure Y
  _PRINT_AR T="INPUT SHAPER: Resonance Tests done"
  _PRINT_AR T="INPUT SHAPER: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph
  
  
  
##  action_respond_info will be always executed at the beginning of an macro evaluation.
##  Use _PRINT_AR if you need the order of several console outputs in the order given by the macro
##  Use: _PRINT_AR T="QGL forced by PRINT_START"
[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  #{% if params.SHOW_LCD|default('false') == 'true' %} M117 {params.T} {% endif %}
  {action_respond_info(params.T)}

[gcode_macro _CASELIGHT_ON]
description: Helper: Light on
gcode:
  SET_PIN PIN=caselight VALUE=1.0
    
[gcode_macro _CASELIGHT_OFF]
description: Helper: Light off
gcode:
  SET_PIN PIN=caselight VALUE=0.0

[gcode_macro LIGHT_SWITCH]
description: Toggle light
gcode:
  {%if printer['output_pin caselight'].value == 0 %}
    _CASELIGHT_ON
  {% else %}
    _CASELIGHT_OFF
  {% endif %}
  

[gcode_macro _SHUTDOWN_PI]
description: Helper: Power down the rPi
gcode: {action_call_remote_method("shutdown_machine")}

[gcode_macro PRINTER_OFF]
description: Park head and Power down the rPi
gcode:
  _CG28 ; home if not already homed
  G90   ; absolute positioning
  G0 X175 Y175 Z25 F6000
  M117 PI Off in 5 sec
  G4 P5000
  M400
  _SHUTDOWN_PI
  

# Filament change
[gcode_macro CHANGE_FILAMENT]
description: Pauses and unloads filament
gcode:
    {% set TEMP = params.TEMP|default(230)|float %}

 	SAVE_GCODE_STATE NAME=CHANGE_FILAMENT_state
    PAUSE
    UNLOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=CHANGE_FILAMENT_state

[gcode_macro UNLOAD_FILAMENT]
description: Heats nozzle if needed then unloads filament and forms tip
gcode:
    {% set TEMP = params.TEMP|default(230)|float %}
    {% set DISTANCE = params.DISTANCE|default(105)|float %}

    M400
	SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state
	_LOW_TEMP_CHECK T={TEMP}
    M82
    ; Filament tip shaping sequence
    G92 E0
	G1 E-2 F3600
    G1 E2 F3600
    G1 E-2 F3600
    G1 E3 F3600
    G1 E-3 F3600
    G1 E4 F3600
    G1 E-4 F3600

    M83
    G1 E-20 F3600
    G4 P3000
   G1 E{DISTANCE|float * -1} F3000
	RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state

[gcode_macro LOAD_FILAMENT]
description: Heats nozzle if needed then loads filament
gcode:
    {% set TEMP = params.TEMP|default(230)|float %}
    {% set DISTANCE = params.DISTANCE|default(105)|float %}

	M400
	SAVE_GCODE_STATE NAME=LOAD_FILAMENT_state
	_LOW_TEMP_CHECK T={TEMP}
    M83
	G92 E0
    G1 E{DISTANCE|float} F300
	G92 E0
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state
	
[gcode_macro _LOW_TEMP_CHECK]
description: Check the nozzle is at temperature and heat it if needed
gcode: 
    {% set T = params.T|default(230)|float %}

    {% if printer.extruder.target != 0 %}
        {% if printer.extruder.temperature < printer.extruder.target %}
            M109 S{printer.extruder.target|float} 
        {% endif %}
    {% else %}
        {% if printer.extruder.target < T %}
            M109 S{T}
        {% endif %}
    {% endif %}